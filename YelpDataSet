Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 - id
ii. Hours = 1562 - business id
iii. Category = 2643 - business_id
iv. Attribute = 1115 - business_id
v. Review = 10000 - id, 8090 - business_id, 9581 - user_id
vi. Checkin = 493 - business_id
vii. Photo = 10000 - id, 6493 - business_id
viii. Tip = 537 - user_id, 3979 - business_id
ix. User = 10000 - id
x. Friend = 11 - user_id
xi. Elite_years = 2780 - user_id

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	SQL code used to arrive at answer: 
	SELECT *
    	FROM user
    	WHERE coalesce(id, name, review_count, yelping_since, useful, funny, cool, 
			   fans, average_stars, compliment_hot, compliment_more, 
			   compliment_profile, compliment_cute, compliment_list, 
	               compliment_note, compliment_plain, compliment_cool, compliment_funny, 
			   compliment_writer, compliment_photos) IS NULL 
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
		min: 1		max: 5		avg: 3.7082
		
	ii. Table: Business, Column: Stars
		min: 1.0	max: 5.0	avg: 3.6549
	
	iii. Table: Tip, Column: Likes
		min: 0		max: 2		avg: 0.0144
	
	iv. Table: Checkin, Column: Count
		min: 1		max: 53		avg: 1.9414
	
	v. Table: User, Column: Review_count
		min: 0		max: 2000	avg: 24.2995
		
5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer: 
	SELECT city
          ,SUM(review_count)
    	FROM business
   	GROUP BY city
	ORDER BY sum(review_count) DESC
	
	
	Copy and Paste the Result Below:
	city            | SUM(review_count) |
+-----------------+-------------------+
| Las Vegas       |             82854 |
| Phoenix         |             34503 |
| Toronto         |             24113 |
| Scottsdale      |             20614 |
| Charlotte       |             12523 |
| Henderson       |             10871 |
| Tempe           |             10504 |
| Pittsburgh      |              9798 |
| Montréal        |              9448 |
| Chandler        |              8112 |
| Mesa            |              6875 |
| Gilbert         |              6380 |
| Cleveland       |              5593 |
| Madison         |              5265 |
| Glendale        |              4406 |
| Mississauga     |              3814 |
| Edinburgh       |              2792 |
| Peoria          |              2624 |
| North Las Vegas |              2438 |
| Markham         |              2352 |
| Champaign       |              2029 |
| Stuttgart       |              1849 |
| Surprise        |              1520 |
| Lakewood        |              1465 |
| Goodyear        |              1155 |
+-----------------+-------------------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer: 
	SELECT stars AS Star Rating,
	COUNT(stars) AS TOTAL
	FROM business b
	WHERE city = 'Avon'
	GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------------+-------+
| Star Rating | TOTAL |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:
	SELECT stars AS Star Rating,
	COUNT(stars) AS TOTAL
	FROM business b
	WHERE city = 'Beachwood'
	GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------------+-------+
| Star Rating | TOTAL |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	SELECT name,
		 review_count
	FROM user
	ORDER BY review_count desc
	LIMIT 3	
		
	Copy and Paste the Result Below:
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+

8. Does posing more reviews correlate with more fans?
	No
Please explain your findings and interpretation of the results:
	Result showed no correlation between fans and review count. 
	Users with the most fans don't have the most reviews.

	SQL code used to arrive at answer:
	SELECT name, 
      	 review_count, 
     		 fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10
	
	Copy and Paste Result Below:
+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
+-----------+--------------+------+
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: More reviews with the word "love" than "hate"
	
	SQL code used to arrive at answer:
	SELECT (SELECT COUNT(text)
		  FROM review
     		  WHERE text LIKE "%love%") AS  love, 
	(SELECT COUNT(text) 
	 FROM review
	 WHERE text LIKE "%hate%") AS hate

+------+------+
| love | hate |
+------+------+
| 1780 |  232 |
+------+------+
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	SELECT name, 
      	 fans
	FROM user
	ORDER BY fans desc
	LIMIT 10
	
	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. 
   Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
	City: Edinburgh

i. Do the two groups you chose to analyze have a different distribution of hours?

	Yes
ii. Do the two groups you chose to analyze have a different number of reviews?
         
      Yes
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	Business in the Restaurant category has considerably higher number of reviews. Need largr sample to confirm if this is significant.

SQL code used for analysis:

	SELECT b.name,
       	 b.city,
      	 c.category, 
      	 b.stars, 
      	 h.hours,
      	 b.review_count,
      	 b.postal_code
	FROM (business b 
      	 INNER JOIN category c  
              	ON b.id = c.business_id) 
	INNER JOIN hours h 
       	 ON h.business_id = c.business_id
	WHERE b.city = 'Edinburgh' 
	GROUP BY b.stars;

	Output:
+------------------------+-----------+-------------+-------+----------------------+--------------+-------------+
| name                   | city      | category    | stars | hours                | review_count | postal_code |
+------------------------+-----------+-------------+-------+----------------------+--------------+-------------+
| Mood                   | Edinburgh | Nightlife   |   2.0 | Thursday|22:30-3:00  |           11 | EH1 3AA     |
| A & A Traders          | Edinburgh | Shopping    |   3.5 | Saturday|9:00-18:00  |            6 | EH7 5RQ     |
| Miros Cantina Mexicana | Edinburgh | Restaurants |   4.0 | Saturday|12:00-22:30 |           37 | EH2 4BA     |
+------------------------+-----------+-------------+-------+----------------------+--------------+-------------+
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         
      Business that is still open has higher average star rating than business that is closed
ii. Difference 2:
	Closed business is categorised as nightlife. Open business categorised as Restaurant. 
         
         
SQL code used for analysis:

	SELECT b.name,
       	 b.is_open,
     	  	 c.category,
      	 b.stars,
      	 h.hours,
     		 b.review_count,
      	 b.postal_code
	FROM (business b 
		INNER JOIN category c 
			ON b.id = c.business_id) 
	INNER JOIN hours h
      	ON h.business_id = c.business_id
	WHERE b.city = 'Edinburgh' 
	GROUP BY b.is_open;

+------------------------+---------+-------------+-------+----------------------+--------------+-------------+
| name                   | is_open | category    | stars | hours                | review_count | postal_code |
+------------------------+---------+-------------+-------+----------------------+--------------+-------------+
| Mood                   |       0 | Nightlife   |   2.0 | Thursday|22:30-3:00  |           11 | EH1 3AA     |
| Miros Cantina Mexicana |       1 | Restaurants |   4.0 | Saturday|12:00-22:30 |           37 | EH2 4BA     |
+------------------------+---------+-------------+-------+----------------------+--------------+-------------+
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
         I will be reviewing the Cities with the most/least total reviews on yelp.

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

	This analysis will require data from the business table and category table, such as id, stars, and review count. 
	To reduce irrelevant data, I have filtered to only looking at cities with at least 10 companies.
                           

iii. Output of your finished dataset:
         
+-----------------+-----------+---------------+-----------+
| companies_total | avg_stars | total_reviews | city      |
+-----------------+-----------+---------------+-----------+
|              17 |      4.03 |          8267 | Las Vegas |
|              21 |      3.81 |          4952 | Phoenix   |
|              24 |      3.73 |          1889 | Toronto   |
+-----------------+-----------+---------------+-----------+
+-----------------+-----------+---------------+-------------+
+-----------------+-----------+---------------+-----------+
| companies_total | avg_stars | total_reviews | city      |
+-----------------+-----------+---------------+-----------+
|              24 |      3.73 |          1889 | Toronto   |
|              21 |      3.81 |          4952 | Phoenix   |
|              17 |      4.03 |          8267 | Las Vegas |
+-----------------+-----------+---------------+-----------+
         
iv. Provide the SQL code you used to create your final dataset:

SELECT COUNT(DISTINCT b.id) AS companies_total,
	 ROUND(AVG(b.stars),2) AS avg_stars,
	 SUM(b.review_count) AS total_reviews,
	 b.city
FROM (business b
INNER JOIN category c 
      ON b.id = c.business_id)
GROUP BY b.city 
HAVING companies_total > 10
ORDER BY total_reviews DESC;

SELECT COUNT(DISTINCT b.id) AS companies_total,
	 ROUND(AVG(b.stars),2) AS avg_stars,
	 SUM(b.review_count) AS total_reviews,
	 b.city
FROM (business b
INNER JOIN category c 
       ON b.id = c.business_id)
GROUP BY b.city 
HAVING companies_total > 10
ORDER BY total_reviews ASC;
